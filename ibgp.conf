protocol direct IBGP_DUMMY {
    interface "LINK_DUMMY";
    include "/etc/bird/ibgp/custom_interface*.conf";

    ipv4 {
      import filter {
        bgp_large_community.add((NET_AS, 50, NET_AS));
        accept;
      };
    };

    ipv6 {
      import filter {
        bgp_large_community.add((NET_AS, 50, NET_AS));
        accept;
      };
    };
}

function SELF_IP_LIST() {
    case net.type {
      NET_IP4: return net ~ SELF_IPv4_LIST;
      NET_IP6: return net ~ SELF_IPv6_LIST;
  }
}

filter IBGP_IMPORT_FILTER {
    include "/etc/bird/ibgp/custom_import_filter*.conf";
    if SELF_IP_LIST() || bgp_large_community ~ [(NET_AS, 2000, NET_AS)] then reject;
    if bgp_large_community ~ [(NET_AS, 1000, *)] then { bgp_local_pref = 500; } else { bgp_local_pref = 50; }
    bgp_large_community.add((NET_AS, PRIV_AS-4200000000, bgp_local_pref));
    accept;
}

function IBGP_IMPORT_FILTER_METRICS(int c_metrics; int o_metrics; int cmed) {
    include "/etc/bird/ibgp/custom_import_filter*.conf";
    if SELF_IP_LIST() || bgp_large_community ~ [(NET_AS, 2000, NET_AS)] then reject;
    if bgp_large_community ~ [(NET_AS, 1000, *)] then { bgp_local_pref = c_metrics; } else { bgp_local_pref = o_metrics; }
    bgp_large_community.add((NET_AS, PRIV_AS-4200000000, bgp_med));
    accept;
}

filter IBGP_EXPORT_FILTER {
    if source = RTS_STATIC then reject;
    bgp_med = bgp_med + 50;
    if bgp_large_community ~ [(NET_AS, 1000, *)] then {accept;} else {bgp_large_community.add((NET_AS, 100, PRIV_AS)); accept;}
}

template bgp IBGP_PEER {
    local as PRIV_AS;
    #confederation 42925;
    #confederation member yes;
    graceful restart on;
    long lived graceful restart on;
    enable extended messages;
    allow bgp_local_pref;
    allow bgp_med;
    default bgp_med 50;
    med metric;
    deterministic med;

    ipv4 {
        extended next hop on;
        import filter IBGP_IMPORT_FILTER;
        export all;
        next hop self;
    };

    ipv6 {
        import filter IBGP_IMPORT_FILTER;
        export all;
        next hop self;
    };
}

#ipv6 table default_routev6;
#protocol static NET_DEF_ROUTEv6 {
#  route ::/0 reject;
#  ipv6 {
#    table default_routev6;
#    import filter { bgp_large_community.add((NET_AS, 0, 0)); accept; };
#    export none;
#  };
#}
#protocol pipe PIPE_DEFROUTE {
#  table default_routev6;
#  peer table master6;
#  import none;
#  export filter { if net != ::/0 then accept; };
#}
#
#template bgp IBGP_DEFROUTE_PEER {
#    local as PRIV_AS;
#    graceful restart on;
#    long lived graceful restart on;
#    enable extended messages;
#
#    ipv6 {
#        table default_routev6;
#        import filter IBGP_IMPORT_FILTER;
#        export filter { if bgp_large_community ~ [(NET_AS, 0, 0)] then accept; };
#        next hop self;
#    };
#}

include "/etc/bird/ibgp/peers/*.conf";
